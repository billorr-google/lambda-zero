cSYMBOL := 0
cREFERENCE := 1
cLAMBDA := 2
cAPPLICATION := 3
cBUILTIN := 4
cINTEGER := 5
cGLOBAL := 6

cNAME := 0
cOPERATOR := 1

newName(tag) := ((tag, cSYMBOL), cNAME)
newOperator(tag) := ((tag, cSYMBOL), cOPERATOR)
newReference(tag, debruijn) := ((tag, cREFERENCE), debruijn)
newLambda(tag, parameter, body) := ((tag, cLAMBDA), (parameter, body))
newApplication(tag, left, right) := ((tag, cAPPLICATION), (left, right))
newBuiltin(tag, builtin) := ((tag, cBUILTIN), builtin)
newInteger(tag, value) := ((tag, cINTEGER), value)
newGlobal(tag, code) := ((tag, cGLOBAL), code)

getTag(node) := node.first.first
getType(node) := node.first.second
getData(node) := node.second
getParameter(node) := getData(node).first
getBody(node) := getData(node).second
getFunction(node) := getData(node).first
getArgument(node) := getData(node).second

isSymbol(node) := node.getType = cSYMBOL
isReference(node) := node.getType = cREFERENCE
isName(node) := isSymbol(node) /\ node.getData = cNAME
isOperator(node) := isSymbol(node) /\ node.getData = cOPERATOR
isLambda(node) := node.getType = cLAMBDA
isApplication(node) := node.getType = cAPPLICATION
isBuiltin(node) := node.getType = cBUILTIN
isInteger(node) := node.getType = cINTEGER
isGlobal(node) := node.getType = cGLOBAL

newClosure(term, environment) := (term, environment)
getTerm(closure) := closure.first
getEnvironment(closure) := closure.second
