leftAssociative := 0
rightAssociative := 1
nonAssociative := 2

infix := 0
prefix := 1
openfix := 2
closefix := 3

isSpecialOperator(operator) := isOperator(operator) /\
    ["(", ")", "[", "]", " ", "\n", "->", ":=", "\0"].
    contains(getLexeme(getTag(operator)))

reduceApply(operator, left, right) :=
    newApplication(getTag(operator), left, right)
reduceInfix(operator, left, right) :=
    reduceApply(operator, reduceApply(operator, operator, left), right)
reducePrefix(operator, _, right) := reduceApply(operator, operator, right)
reduceNegate(operator, _, right) :=
    reduceInfix(operator, newInteger(getTag(operator), 0), right)
reduceLambda(operator, left, right) := (
    !isSymbol(left) ? syntaxError("invalid parameter", left)
    newLambda(getTag(operator), left, right)
)
reduceUnmatched(operator, _, _) := syntaxError("missing close for", operator)
reduceParentheses(close, open, contents) := (
    !isOpenParen(open) ? syntaxError("missing open for", close)
    isEOF(contents) ? newLambda(getTag(open), blank, blank)
    isSpecialOperator(contents) ?
        syntaxError("operator cannot be parenthesized", contents)
    isOperator(contents) ? newName(getTag(contents))
    isCommaList(contents) \/ isTuple(contents) ?
        newTuple(getTag(open), contents)
    contents
)
reduceIllegal(_, _, _) := error("Internal error")

syntax(rules) := rules.first
collapse(rules) := rules.second
ordering(rules) := rules.syntax.first
fixity(rules) := rules.syntax.second
precedence(rules) := rules.ordering.first
associativity(rules) := rules.ordering.second
leftPrecedence(rules) := rules.precedence.first
rightPrecedence(rules) := rules.precedence.second

getRules(operator, isAfterOperator) := (
    isSpace(operator) ? ((((20, 20), leftAssociative), infix), reduceApply)
    getLexeme(getTag(operator)) =:= "-" /\ isAfterOperator ?
        ((((21, 21), leftAssociative), prefix), reduceNegate)
    operators := [
        ("\0", ((((0, 0), leftAssociative), closefix), reduceIllegal)),
        ("(", ((((22, 0), leftAssociative), openfix), reduceUnmatched)),
        (")", ((((0, 22), rightAssociative), closefix), reduceParentheses)),
        (",", ((((1, 1), leftAssociative), infix), reduceApply)),
        ("\n", ((((2, 2), rightAssociative), infix), reduceApply)),
        (":=", ((((3, 3), nonAssociative), infix), reduceApply)),
        ("->", ((((5, 5), rightAssociative), infix), reduceLambda)),
        ("=", ((((12, 12), nonAssociative), infix), reduceInfix)),
        ("!=", ((((12, 12), nonAssociative), infix), reduceInfix)),
        ("<", ((((12, 12), nonAssociative), infix), reduceInfix)),
        (">", ((((12, 12), nonAssociative), infix), reduceInfix)),
        ("<=", ((((12, 12), nonAssociative), infix), reduceInfix)),
        (">=", ((((12, 12), nonAssociative), infix), reduceInfix)),
        ("+", ((((16, 16), leftAssociative), infix), reduceInfix)),
        ("-", ((((16, 16), leftAssociative), infix), reduceInfix)),
        ("*", ((((17, 17), leftAssociative), infix), reduceInfix)),
        ("/", ((((17, 17), leftAssociative), infix), reduceInfix)),
        ("%", ((((17, 17), leftAssociative), infix), reduceInfix)),
        ("!", ((((21, 21), leftAssociative), prefix), reducePrefix))
    ]
    defaultRules := ((((14, 14), leftAssociative), infix), reduceInfix)
    operators.lookup(getLexeme(getTag(operator))) ?|| defaultRules
)

isHigherPrecedence(leftOperatorWithRules, rightOperatorWithRules) := (
    (leftOperator, leftRules) := leftOperatorWithRules
    (rightOperator, rightRules) := rightOperatorWithRules

    leftRules.rightPrecedence = rightRules.leftPrecedence /\
        leftRules.associativity = nonAssociative ?
            syntaxError("operator is non-associative", leftOperator)

    leftRules.rightPrecedence = rightRules.leftPrecedence /\
        rightRules.associativity = nonAssociative ?
            syntaxError("operator is non-associative", leftOperator)

    rightRules.associativity = rightAssociative ?
        leftRules.rightPrecedence > rightRules.leftPrecedence
    leftRules.rightPrecedence >= rightRules.leftPrecedence
)
