evaluate(closure, stack) := (
    (term, environment) := closure
    isReference(term) ?
        evaluate(environment[getData(term)], stack)
    isInteger(term) ?
        (stack.isEmpty ? closure || runtimeError("extra argument",
            getTerm(stack[0])))
    isApplication(term) ?
        evaluate(newClosure(getFunction(term), environment),
                 newClosure(getArgument(term), environment) :: stack)
    isLambda(term) ? (
        stack.isEmpty ? closure
        evaluate(newClosure(getBody(term), stack[0] :: environment), --stack)
    )
    isBuiltin(term) ? (
        (arity, builtin) := getData(term)
        arity = 0 ? evaluate(builtin((), ()), stack)
        stack.isEmpty ? runtimeError("missing argument to", term)
        arity = 1 ? evaluate(builtin(evaluate(stack[0], []), ()), --stack)
        (--stack).isEmpty ? runtimeError("missing argument to", term)
        result := builtin(evaluate(stack[0], []), evaluate(stack[1], []))
        evaluate(result, stack.drop(2))
    )
    error("Internal error")
)
