===============================================================================
if false (x -> x) (y -> y)
(y -> y)
===============================================================================
tail((x -> x) :: (y -> y))
(y -> y)
===============================================================================
head(((x -> x) :: (y -> y)) :: (z -> z))
(, -> ((, (x -> x)) (y -> y)))
===============================================================================
(squares | even)[10]
400
===============================================================================
sum(take(squares, 5))
30
===============================================================================
head(drop(squares, 5))
25
===============================================================================
squares.take(20).drop(1).all(> 0)
(x -> (y -> x))
===============================================================================
squares.take(5).reverse[4]
0
===============================================================================
squares.drop(1).take(3).product
36
===============================================================================
squares.take(7).reverse.drop(2).head
16
===============================================================================
((head <> `drop(2) <> reverse)(squares.take(7)))
16
===============================================================================
49 : (squares | odd)
(x -> (y -> x))
===============================================================================
squares.map(* 2).take(4).sum
28
===============================================================================
sum(naturals.take(10))
45
===============================================================================
sum((naturals | odd).take(10))
100
===============================================================================
head(sort(5 :: 60 :: 7 :: 14 :: 2 :: 5 :: 33 :: []))
2
===============================================================================
head(5 :: (10 :: (15 :: (20 :: []))) | (> 10))
15
===============================================================================
factorial(10)
3628800
===============================================================================
head(replicate(10, 7))
10
===============================================================================
main(input) := showIntegerList(naturals.take(5).map((2 + 1) *))
[0, 3, 6, 9, 12]
===============================================================================
main(input) := showIntegerList(naturals.take(5).map(* (2 + 1)))
[0, 3, 6, 9, 12]
===============================================================================
main(input) := showIntegerList(naturals.take(5).map(2 * 2 +))
[4, 5, 6, 7, 8]
===============================================================================
main(input) := showIntegerList(naturals.take(5).map(+ 2 * 2))
[4, 5, 6, 7, 8]
===============================================================================
===============================================================================
main(input) := showInteger(123)
123
===============================================================================
main(input) := showInteger(-123)
-123
===============================================================================
main(input) := "abcdef".interleave(',')
a,b,c,d,e,f
===============================================================================
main(input) := showIntegerList(5..9)
[5, 6, 7, 8, 9]
===============================================================================
"abcd" === 'a'..'d'
(t' -> (f' -> t'))
===============================================================================
maximum(take(squares, 7) | odd)
25
===============================================================================
"aceswild".find(even) ?: -1
108
===============================================================================
"aces".find(even) ?: -1
-1
===============================================================================
main(input) := union("abc", "bbd")
abcd
===============================================================================
main(input) := intersection("abbc", "bbcd")
bbc
===============================================================================
main(input) := deduplicate("acbbcda")
acbd
===============================================================================
fromJust(just(10))
10
===============================================================================
fromJust(nothing)
\nRuntime error: hit 'error'\n\nundefined
===============================================================================
isJust(just(1))
(x -> (y -> x))
===============================================================================
isJust(nothing)
(x -> (y -> y))
===============================================================================
isNothing(nothing)
(x -> (y -> x))
===============================================================================
isNothing(just(10))
(x -> (y -> y))
===============================================================================
main(input) := showBoolean((just(2) ?. (x -> just(2 * x)) ?: 0) == 4)
true
===============================================================================
0 ^ 0
1
===============================================================================
0 ^ 1
0
===============================================================================
3 ^ 3
27
===============================================================================
4 ^ 5
1024
===============================================================================
1 ^ -1
1
===============================================================================
-1 ^ -1
-1
===============================================================================
0 ^ -1
\nRuntime error: divide by zero in '/'
===============================================================================
2 ^ -1
0
===============================================================================
239 ^ 7
44543599279432079
===============================================================================
-2^2
4
===============================================================================
gcd(1071, 462)
21
===============================================================================
main(input) := naturals.take(10).map(showInteger).concatenate
0123456789
===============================================================================
main(input) := naturals.take(10).map(showInteger).join([])
0123456789
===============================================================================
length("")
0
===============================================================================
((* 2) ^^ 2 ^^ 2) 1
16
===============================================================================
left((1 , (* 2) ^^ 2))
1
===============================================================================
10.(* 2)
20
===============================================================================
main(input) := showIntegerListPair(span((1 .. 5), (< 3)))
([1, 2], [3, 4, 5])
===============================================================================
head naturals.tail
1
===============================================================================
head (naturals).tail
1
===============================================================================
(head) naturals.tail
1
===============================================================================
head(naturals).tail
\nRuntime error: extra argument 'false'
===============================================================================
f(x) := x > 0 ? (+) || (-) \n g(x) := x(9, 5) \n g(f(-1))
4
===============================================================================
f(x) := x > 0 ? ((+) 1) || ((-) 1) \n g(x) := x(5) \n g(f(-1))
-4
===============================================================================
(true ~) false
Syntax error: invalid operator in section '~'
===============================================================================
(true \/ ~ ~ ~true)
(x -> (y -> x))
===============================================================================
length [1, 2, 3, 4, 5, 6]
6
===============================================================================
[1, 2, 3, 4, 5, 6][4]
5
===============================================================================
~isEmpty([])
(x -> (y -> y))
===============================================================================
~[].isEmpty
(x -> (y -> y))
===============================================================================
right((, 3) 4)
3
===============================================================================
#(3..9)
7
===============================================================================
'#' : "!@#$%^"
(x -> (y -> x))
===============================================================================
`mod(2, 5)
1
===============================================================================
15 - 3.`mod(5) * 7
1
===============================================================================
~`and(true, false)
(x -> (y -> x))
===============================================================================
left(swap((1, 2)))
2
===============================================================================
"//123".startsWith("//")
(x -> (y -> x))
===============================================================================
parseInteger("1234567890", 10)
1234567890
===============================================================================
parseInteger("-1234567890", 10)
-1234567890
===============================================================================
(1..10)[5]
6
===============================================================================
(1..10)[]
Syntax error: missing argument to '['
===============================================================================
(1..10)[1, 2]
Syntax error: too many arguments to '['
===============================================================================
main(input) := showIntegerListList(" 12 3  4 ".split(== ' '))
[[], [49, 50], [51], [], [52], []]
===============================================================================
main(input) := showIntegerListList("12 3  4".split(== ' '))
[[49, 50], [51], [], [52]]
===============================================================================
main(input) := showIntegerListList(words(" 12 3  4 "))
[[49, 50], [51], [52]]
===============================================================================
main(input) := showIntegerList(primes.take(5).map((0 -)))
[-2, -3, -5, -7, -11]
===============================================================================
main(input) := showIntegerList(primes.take(10))
[2, 3, 5, 7, 11, 13, 17, 19, 23, 29]
===============================================================================
zip(naturals, primes.take(10)).lookup(7) ?: -1
19
===============================================================================
main(input) := showIntegerPairList(zip(naturals, primes.take(8)))
[(0, 2), (1, 3), (2, 5), (3, 7), (4, 11), (5, 13), (6, 17), (7, 19)]
===============================================================================
primes[25]
101
===============================================================================
